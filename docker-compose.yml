version: '3.8'

services:
  mongodb:
    image: mongo:6.0
    container_name: stock_mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: stockprediction
    volumes:
      - mongodb_:/data/db
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.0-alpine
    container_name: stock_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_:/data
    networks:
      - stock_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:13
    container_name: stock_postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_:/var/lib/postgresql/data
    networks:
      - stock_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: stock_airflow_webserver
    restart: always
    depends_on:
      - postgres
      - mongodb
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=U5VCtFOHH6kHSAwXOMo7tx7hNFanxEKX3EttTByCQUM=
      - AIRFLOW__WEBSERVER__SECRET_KEY=dzbbIEu3FMD0euFNahpTnQ
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin123
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./.env:/opt/airflow/.env
      - ./backend/ml_models:/opt/airflow/ml_models
    networks:
      - stock_network
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin123 &&
        airflow webserver --port 8080
      "
  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: stock_airflow_scheduler
    restart: always
    depends_on:
      - postgres
      - mongodb
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./backend/ml_models:/opt/airflow/ml_models
    networks:
      - stock_network
    command: "airflow scheduler"
  flask-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: stock_flask_api
    restart: always
    ports:
      - "5000:5000"
    environment:
      - MONGO_URI=mongodb://root:password123@mongodb:27017/stockprediction?authSource=admin
      - REDIS_URL=redis://redis:6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
    depends_on:
      - mongodb
      - redis
      - airflow-webserver
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
    networks:
      - stock_network

  react-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stock_react_frontend
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - flask-api
    networks:
      - stock_network

  prometheus:
    image: prom/prometheus:latest
    container_name: stock_prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_:/prometheus
    networks:
      - stock_network

  grafana:
    image: grafana/grafana:latest
    container_name: stock_grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_:/var/lib/grafana
    networks:
      - stock_network

volumes:
  mongodb_:
  redis_:
  postgres_:
  prometheus_:
  grafana_:

networks:
  stock_network:
    driver: bridge